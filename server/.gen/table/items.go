//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Items = newItemsTable("", "items", "")

type itemsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Timestamp sqlite.ColumnInteger
	Name      sqlite.ColumnString
	Price     sqlite.ColumnFloat
	AuthorID  sqlite.ColumnInteger
	GroupID   sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ItemsTable struct {
	itemsTable

	EXCLUDED itemsTable
}

// AS creates new ItemsTable with assigned alias
func (a ItemsTable) AS(alias string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsTable with assigned schema name
func (a ItemsTable) FromSchema(schemaName string) *ItemsTable {
	return newItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsTable with assigned table prefix
func (a ItemsTable) WithPrefix(prefix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsTable with assigned table suffix
func (a ItemsTable) WithSuffix(suffix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsTable(schemaName, tableName, alias string) *ItemsTable {
	return &ItemsTable{
		itemsTable: newItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newItemsTableImpl("", "excluded", ""),
	}
}

func newItemsTableImpl(schemaName, tableName, alias string) itemsTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		TimestampColumn = sqlite.IntegerColumn("timestamp")
		NameColumn      = sqlite.StringColumn("name")
		PriceColumn     = sqlite.FloatColumn("price")
		AuthorIDColumn  = sqlite.IntegerColumn("author_id")
		GroupIDColumn   = sqlite.IntegerColumn("group_id")
		allColumns      = sqlite.ColumnList{IDColumn, TimestampColumn, NameColumn, PriceColumn, AuthorIDColumn, GroupIDColumn}
		mutableColumns  = sqlite.ColumnList{TimestampColumn, NameColumn, PriceColumn, AuthorIDColumn, GroupIDColumn}
	)

	return itemsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Timestamp: TimestampColumn,
		Name:      NameColumn,
		Price:     PriceColumn,
		AuthorID:  AuthorIDColumn,
		GroupID:   GroupIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
