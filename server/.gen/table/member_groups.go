//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var MemberGroups = newMemberGroupsTable("", "member_groups", "")

type memberGroupsTable struct {
	sqlite.Table

	// Columns
	GroupID  sqlite.ColumnInteger
	MemberID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MemberGroupsTable struct {
	memberGroupsTable

	EXCLUDED memberGroupsTable
}

// AS creates new MemberGroupsTable with assigned alias
func (a MemberGroupsTable) AS(alias string) *MemberGroupsTable {
	return newMemberGroupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MemberGroupsTable with assigned schema name
func (a MemberGroupsTable) FromSchema(schemaName string) *MemberGroupsTable {
	return newMemberGroupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MemberGroupsTable with assigned table prefix
func (a MemberGroupsTable) WithPrefix(prefix string) *MemberGroupsTable {
	return newMemberGroupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MemberGroupsTable with assigned table suffix
func (a MemberGroupsTable) WithSuffix(suffix string) *MemberGroupsTable {
	return newMemberGroupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMemberGroupsTable(schemaName, tableName, alias string) *MemberGroupsTable {
	return &MemberGroupsTable{
		memberGroupsTable: newMemberGroupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newMemberGroupsTableImpl("", "excluded", ""),
	}
}

func newMemberGroupsTableImpl(schemaName, tableName, alias string) memberGroupsTable {
	var (
		GroupIDColumn  = sqlite.IntegerColumn("group_id")
		MemberIDColumn = sqlite.IntegerColumn("member_id")
		allColumns     = sqlite.ColumnList{GroupIDColumn, MemberIDColumn}
		mutableColumns = sqlite.ColumnList{}
	)

	return memberGroupsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GroupID:  GroupIDColumn,
		MemberID: MemberIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
