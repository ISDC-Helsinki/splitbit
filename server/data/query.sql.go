// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const addGroup = `-- name: AddGroup :one
INSERT INTO groups (name) VALUES (?) RETURNING id
`

func (q *Queries) AddGroup(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, addGroup, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addItemToGroup = `-- name: AddItemToGroup :one
INSERT INTO items (name, timestamp, price, group_id, author_id) VALUES (?, ?, ?, ?, ?) RETURNING id
`

type AddItemToGroupParams struct {
	Name      string  `json:"name"`
	Timestamp int64   `json:"timestamp"`
	Price     float64 `json:"price"`
	GroupID   int64   `json:"group_id"`
	AuthorID  int64   `json:"author_id"`
}

func (q *Queries) AddItemToGroup(ctx context.Context, arg AddItemToGroupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addItemToGroup,
		arg.Name,
		arg.Timestamp,
		arg.Price,
		arg.GroupID,
		arg.AuthorID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addMemberToGroup = `-- name: AddMemberToGroup :exec
INSERT INTO member_groups (group_id, member_id) VALUES (?, ?)
`

type AddMemberToGroupParams struct {
	GroupID  int64 `json:"group_id"`
	MemberID int64 `json:"member_id"`
}

func (q *Queries) AddMemberToGroup(ctx context.Context, arg AddMemberToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToGroup, arg.GroupID, arg.MemberID)
	return err
}

const addUser = `-- name: AddUser :one
INSERT INTO members (username, displayName, password) VALUES (?, ?, ?) RETURNING id
`

type AddUserParams struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
	Password    string `json:"password"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Displayname, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getFriendsOfUser = `-- name: GetFriendsOfUser :many
SELECT mg2.member_id, COUNT(mg1.group_id) AS common_group_count
FROM member_groups mg1
INNER JOIN member_groups mg2 ON mg1.group_id = mg2.group_id
WHERE mg1.member_id = ? AND mg2.member_id <> 3
GROUP BY mg2.member_id
`

type GetFriendsOfUserRow struct {
	MemberID         int64 `json:"member_id"`
	CommonGroupCount int64 `json:"common_group_count"`
}

func (q *Queries) GetFriendsOfUser(ctx context.Context, memberID int64) ([]GetFriendsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsOfUser, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsOfUserRow
	for rows.Next() {
		var i GetFriendsOfUserRow
		if err := rows.Scan(&i.MemberID, &i.CommonGroupCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsAll = `-- name: GetGroupsAll :many
SELECT id, name FROM groups
`

func (q *Queries) GetGroupsAll(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsOfMember = `-- name: GetGroupsOfMember :many
SELECT id, name, group_id, member_id FROM groups JOIN member_groups ON groups.id = member_groups.group_id WHERE member_groups.member_id = ?
`

type GetGroupsOfMemberRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	GroupID  int64  `json:"group_id"`
	MemberID int64  `json:"member_id"`
}

func (q *Queries) GetGroupsOfMember(ctx context.Context, memberID int64) ([]GetGroupsOfMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsOfMember, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsOfMemberRow
	for rows.Next() {
		var i GetGroupsOfMemberRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GroupID,
			&i.MemberID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsOfGroup = `-- name: GetItemsOfGroup :many
SELECT id, timestamp, name, price, author_id, group_id FROM items WHERE group_id = ? ORDER BY timestamp DESC
`

func (q *Queries) GetItemsOfGroup(ctx context.Context, groupID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsOfGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Name,
			&i.Price,
			&i.AuthorID,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersOfGroup = `-- name: GetMembersOfGroup :many
SELECT id, username, displayName FROM members JOIN member_groups ON member_groups.member_id = members.id WHERE group_id = ?
`

type GetMembersOfGroupRow struct {
	ID          int64  `json:"id"`
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

func (q *Queries) GetMembersOfGroup(ctx context.Context, groupID int64) ([]GetMembersOfGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembersOfGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersOfGroupRow
	for rows.Next() {
		var i GetMembersOfGroupRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Displayname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNetAmountForUserInGroup = `-- name: GetNetAmountForUserInGroup :one
SELECT 
    SUM(CASE 
            WHEN author_id = ? THEN -price 
            ELSE price 
        END) AS net_amount
FROM 
    items
WHERE 
    group_id = ?
`

type GetNetAmountForUserInGroupParams struct {
	AuthorID int64 `json:"author_id"`
	GroupID  int64 `json:"group_id"`
}

func (q *Queries) GetNetAmountForUserInGroup(ctx context.Context, arg GetNetAmountForUserInGroupParams) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, getNetAmountForUserInGroup, arg.AuthorID, arg.GroupID)
	var net_amount sql.NullFloat64
	err := row.Scan(&net_amount)
	return net_amount, err
}

const getUserByUsernameAndPassword = `-- name: GetUserByUsernameAndPassword :one
SELECT id, username FROM members WHERE username = ? AND password = ?
`

type GetUserByUsernameAndPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type GetUserByUsernameAndPasswordRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByUsernameAndPassword(ctx context.Context, arg GetUserByUsernameAndPasswordParams) (GetUserByUsernameAndPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndPassword, arg.Username, arg.Password)
	var i GetUserByUsernameAndPasswordRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
