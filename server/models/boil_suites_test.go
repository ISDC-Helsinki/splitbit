// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Groups", testGroups)
	t.Run("Items", testItems)
	t.Run("Members", testMembers)
}

func TestDelete(t *testing.T) {
	t.Run("Groups", testGroupsDelete)
	t.Run("Items", testItemsDelete)
	t.Run("Members", testMembersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("Items", testItemsQueryDeleteAll)
	t.Run("Members", testMembersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("Items", testItemsSliceDeleteAll)
	t.Run("Members", testMembersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Groups", testGroupsExists)
	t.Run("Items", testItemsExists)
	t.Run("Members", testMembersExists)
}

func TestFind(t *testing.T) {
	t.Run("Groups", testGroupsFind)
	t.Run("Items", testItemsFind)
	t.Run("Members", testMembersFind)
}

func TestBind(t *testing.T) {
	t.Run("Groups", testGroupsBind)
	t.Run("Items", testItemsBind)
	t.Run("Members", testMembersBind)
}

func TestOne(t *testing.T) {
	t.Run("Groups", testGroupsOne)
	t.Run("Items", testItemsOne)
	t.Run("Members", testMembersOne)
}

func TestAll(t *testing.T) {
	t.Run("Groups", testGroupsAll)
	t.Run("Items", testItemsAll)
	t.Run("Members", testMembersAll)
}

func TestCount(t *testing.T) {
	t.Run("Groups", testGroupsCount)
	t.Run("Items", testItemsCount)
	t.Run("Members", testMembersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Groups", testGroupsHooks)
	t.Run("Items", testItemsHooks)
	t.Run("Members", testMembersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("Items", testItemsInsert)
	t.Run("Items", testItemsInsertWhitelist)
	t.Run("Members", testMembersInsert)
	t.Run("Members", testMembersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ItemToMemberUsingAuthor", testItemToOneMemberUsingAuthor)
	t.Run("ItemToGroupUsingGroup", testItemToOneGroupUsingGroup)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GroupToItems", testGroupToManyItems)
	t.Run("GroupToMembers", testGroupToManyMembers)
	t.Run("MemberToAuthorItems", testMemberToManyAuthorItems)
	t.Run("MemberToGroups", testMemberToManyGroups)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ItemToMemberUsingAuthorItems", testItemToOneSetOpMemberUsingAuthor)
	t.Run("ItemToGroupUsingItems", testItemToOneSetOpGroupUsingGroup)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GroupToItems", testGroupToManyAddOpItems)
	t.Run("GroupToMembers", testGroupToManyAddOpMembers)
	t.Run("MemberToAuthorItems", testMemberToManyAddOpAuthorItems)
	t.Run("MemberToGroups", testMemberToManyAddOpGroups)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GroupToMembers", testGroupToManySetOpMembers)
	t.Run("MemberToGroups", testMemberToManySetOpGroups)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GroupToMembers", testGroupToManyRemoveOpMembers)
	t.Run("MemberToGroups", testMemberToManyRemoveOpGroups)
}

func TestReload(t *testing.T) {
	t.Run("Groups", testGroupsReload)
	t.Run("Items", testItemsReload)
	t.Run("Members", testMembersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Groups", testGroupsReloadAll)
	t.Run("Items", testItemsReloadAll)
	t.Run("Members", testMembersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Groups", testGroupsSelect)
	t.Run("Items", testItemsSelect)
	t.Run("Members", testMembersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Groups", testGroupsUpdate)
	t.Run("Items", testItemsUpdate)
	t.Run("Members", testMembersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("Items", testItemsSliceUpdateAll)
	t.Run("Members", testMembersSliceUpdateAll)
}
