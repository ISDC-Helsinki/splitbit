// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTests(t *testing.T) {
	t.Parallel()

	query := Tests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TestExists(ctx, tx, o.T)
	if err != nil {
		t.Errorf("Unable to check if Test exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TestExists to return true, but got false.")
	}
}

func testTestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	testFound, err := FindTest(ctx, tx, o.T)
	if err != nil {
		t.Error(err)
	}

	if testFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	testOne := &Test{}
	testTwo := &Test{}
	if err = randomize.Struct(seed, testOne, testDBTypes, false, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}
	if err = randomize.Struct(seed, testTwo, testDBTypes, false, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = testOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = testTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	testOne := &Test{}
	testTwo := &Test{}
	if err = randomize.Struct(seed, testOne, testDBTypes, false, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}
	if err = randomize.Struct(seed, testTwo, testDBTypes, false, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = testOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = testTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Test) error {
	*o = Test{}
	return nil
}

func testTestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Test{}
	o := &Test{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, testDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Test object: %s", err)
	}

	AddTestHook(boil.BeforeInsertHook, testBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	testBeforeInsertHooks = []TestHook{}

	AddTestHook(boil.AfterInsertHook, testAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	testAfterInsertHooks = []TestHook{}

	AddTestHook(boil.AfterSelectHook, testAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	testAfterSelectHooks = []TestHook{}

	AddTestHook(boil.BeforeUpdateHook, testBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	testBeforeUpdateHooks = []TestHook{}

	AddTestHook(boil.AfterUpdateHook, testAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	testAfterUpdateHooks = []TestHook{}

	AddTestHook(boil.BeforeDeleteHook, testBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	testBeforeDeleteHooks = []TestHook{}

	AddTestHook(boil.AfterDeleteHook, testAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	testAfterDeleteHooks = []TestHook{}

	AddTestHook(boil.BeforeUpsertHook, testBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	testBeforeUpsertHooks = []TestHook{}

	AddTestHook(boil.AfterUpsertHook, testAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	testAfterUpsertHooks = []TestHook{}
}

func testTestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(testColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	testDBTypes = map[string]string{`T`: `INT`}
	_           = bytes.MinRead
)

func testTestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(testPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(testAllColumns) == len(testPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, testDBTypes, true, testPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(testAllColumns) == len(testPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Test{}
	if err = randomize.Struct(seed, o, testDBTypes, true, testColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, testDBTypes, true, testPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(testAllColumns, testPrimaryKeyColumns) {
		fields = testAllColumns
	} else {
		fields = strmangle.SetComplement(
			testAllColumns,
			testPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTestsUpsert(t *testing.T) {
	t.Parallel()
	if len(testAllColumns) == len(testPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Test{}
	if err = randomize.Struct(seed, &o, testDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Test: %s", err)
	}

	count, err := Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, testDBTypes, false, testPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Test struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Test: %s", err)
	}

	count, err = Tests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
